import asyncio
import json
import datetime
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7334255719:AAHbh1FToqydNAWb-iA-oYTHJzN7Ms0oNts"

# ‚úÖ SheetDB API URL
SHEETDB_URL = "https://sheetdb.io/api/v1/puwfh4ykjybvu"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def handle_start(message: types.Message):
    markup = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://tg-webapp-gamma.vercel.app"))
    ]], resize_keyboard=True)
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üëá", reply_markup=markup)
    print("DEBUG: /start")

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
@dp.message(F.text.lower() == "–ø–æ—Å—Ç")
async def send_post(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(
            text="üç≠ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            url="https://t.me/SkinKorea_bot?startapp"
        )
    ]])
    await bot.send_message(
        chat_id=message.chat.id,
        text=(
            "<b>–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è ‚Äî —ç—Ç–æ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ú—ã –∑–Ω–∞–µ–º, –≥–¥–µ –µ–≥–æ –Ω–∞–π—Ç–∏.</b>\n\n"
            "üîπ –ü—Ä—è–º—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä–µ–π—Å–∫–∏—Ö –∏–Ω—ä–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –¥–ª—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–æ–≤ –∏ —Å–∞–ª–æ–Ω–æ–≤.\n"
            "üîπ –í –Ω–∞–ª–∏—á–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã.\n"
            "üîπ –°–ª–µ–¥–∏–º –∑–∞ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ —Å –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ–µ.\n"
            "üîπ –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Ü–µ–Ω–æ–∫: —Ö–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞–±–æ—Ç–µ –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤.\n"
            "üîπ –ú—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ–º ‚Äî –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, –Ω–æ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ä–∞—Å—Ç—ë—Ç.\n"
            "üîπ –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –ú–æ—Å–∫–≤–µ, –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –≤–∞–º –∫ –Ω–∞–º.\n"
            "üîª <b>–ü–µ—Ä–µ–π—Ç–∏ –≤ Beauty-–ú–∞—Ä–∫–µ—Ç</b>"
        ),
        reply_markup=markup
    )
    await message.answer("üì¢ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message(F.web_app_data)
async def webapp_handler(message: types.Message):
    print("[!] –ü–æ–ª—É—á–µ–Ω–æ web_app_data")
    print(f"Received data raw: {message.web_app_data.data}")

    try:
        data = json.loads(message.web_app_data.data)
        items = data.get("items", [])
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        for item in items:
            row = {
                "data": [{
                    "–î–∞—Ç–∞": now,
                    "–ò–º—è": message.from_user.full_name,
                    "Telegram ID": str(message.from_user.id),
                    "–¢–æ–≤–∞—Ä": item["name"],
                    "–ö–æ–ª-–≤–æ": str(item["quantity"]),
                    "–¶–µ–Ω–∞": str(item["price"]),
                    "–°—É–º–º–∞": str(item["quantity"] * item["price"])
                }]
            }

            print(f"[–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ SheetDB]: {json.dumps(row, ensure_ascii=False)}")

            response = requests.post(SHEETDB_URL, json=row)
            print(f"[SheetDB] –û—Ç–≤–µ—Ç: {response.status_code} - {response.text}")

        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º üôå")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ WebApp] {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ‚úÖ –õ–æ–≥ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def debug_all(message: types.Message):
    print(f"DEBUG: {message.chat.id=} {message.text=}")
    await message.answer("‚úÖ –Ø —Ç–µ–±—è —Å–ª—ã—à—É!")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    print("‚è≥ main() —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    await dp.start_polling(bot)
    print("‚úÖ Polling –Ω–∞—á–∞—Ç")

if __name__ == "__main__":
    print("üëÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(main())