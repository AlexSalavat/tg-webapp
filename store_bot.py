# ‚úÖ store_bot.py ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, —á–∏—Å—Ç—ã–π, –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É
import asyncio
import json
import datetime
import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from oauth2client.service_account import ServiceAccountCredentials

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7558812308:AAG4PwMjatnbNU6xAaS2qWAbciauFvpbEHU"

# üîê Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_key.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–ó–∞–∫–∞–∑—ã KSHOT").sheet1

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ‚úÖ –ö–Ω–æ–ø–∫–∞ WebApp
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text="üõç Beauty-–ú–∞—Ä–∫–µ—Ç",
            web_app=WebAppInfo(url="https://tg-webapp-gamma.vercel.app")
        )]]
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>KSHOT</b> ‚Äî –æ—Ç–∫—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=kb)

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞: –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
@dp.message(F.text.lower() == "–ø–æ—Å—Ç")
async def send_post(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ Beauty-–ú–∞—Ä–∫–µ—Ç",
            web_app=WebAppInfo(url="https://tg-webapp-gamma.vercel.app")
        )
    ]])
    await bot.send_message(
        chat_id="@NEUROBIZ_BIZ",
        text="KSHOT ‚Äî –∫–æ—Ä–µ–π—Å–∫–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è –≤ Telegram. –£–¥–æ–±–Ω–æ. –ë—ã—Å—Ç—Ä–æ. üíâ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –∑–∞—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω üëá",
        reply_markup=markup
    )
    await message.answer("üì¢ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ WebApp
@dp.message(F.web_app_data)
async def webapp_handler(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        items = data.get("items", [])
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        for item in items:
            sheet.append_row([
                now,
                message.from_user.full_name,
                message.from_user.id,
                item["name"],
                item["quantity"],
                item["price"],
                item["quantity"] * item["price"]
            ])

        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º üôå")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ WebApp] {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
